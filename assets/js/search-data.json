{
  
    
        "post0": {
            "title": "Lesson Plan",
            "content": "What topics are going to be in our lesson? . Defining what a variable is | Explains the best way to name a variable | We will also differentiate the data types for different variables stored | How to determine the value of a variable | How data is replaced when transfering data from one list to another | Understanding how indexes work | How data abstraction helps with making an index | . Ideas for our Hacks . Answer the practice questions and create 10 of your own practice questions. | Combine our questions together and make them our hacks. | . What we can add in: . Adding interactions with javascript/python/api/ | Possible jeopardy game or kahoot game | Python quiz | . What we plan to do: . have stuents take time in the middle of the lesson as a break and as a collaborative work period | we plan to be engaging | we plan to break up the lesson between each other | create a small kahoot | .",
            "url": "https://jesa06.github.io/WiSTEM/markdown/2022/11/17/Lesson-Plan.html",
            "relUrl": "/markdown/2022/11/17/Lesson-Plan.html",
            "date": " • Nov 17, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "3.2 Daily Video 3",
            "content": "Notes . Lists are conveninent and helpful because lists allow consistent computations and changing the number of variables | Data abstractions managae complexity through naming a collection of data without representing specifics | Data abstraction helps create a easier and conveninent program | Using lists helps multiple items that are related to each other to be treated a single value | . Practice Questions . | |",
            "url": "https://jesa06.github.io/WiSTEM/markdown/2022/11/16/3.2dailyvideo3.html",
            "relUrl": "/markdown/2022/11/16/3.2dailyvideo3.html",
            "date": " • Nov 16, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "3.2 Data Abstraction Video 2",
            "content": "Lists . Lists allow for data abstraction Variables like strings, numbers, characters, and more can be bundled together . It could be empty from the start and you can add more variables as needed If you set one list equal to another list, or transfer data from one list to another, the data will be completely replaced. You can also append data from one list to another, keeping the old data and adding the new data. | . Big Ideas . Lists can store any types of elements. | In all lists operations, if a list index is less than 1 or greater than the length of the list, an error message is made and the program will terminate. | Data abstraction provides a separation between the abstract properties of a data type and the concrete details of its representation. | 1. Try it now! . Change the amount of coding languages to change the length to 5. . languages_list = [] languages_list = [&quot;Python&quot;, &quot;C++&quot;, &quot;JavaScript&quot;] . 2. Change the following code to print out the list. . languages_list = [] languages_list = [&quot;Python&quot;, &quot;C++&quot;, &quot;JavaScript&quot;] print() . Python . 3. Change the following code to print out only &quot;Python&quot; . languages_list = [] languages_list = [&quot;Python&quot;, &quot;C++&quot;, &quot;JavaScript&quot;] print(languages_list[]) . Input In [6] print(languages_list[]) ^ SyntaxError: invalid syntax . 4. Replace contents/data of listA with contents/data from listB. . listA = [] listA = [1, 55, 8, 2, 76] listB = [] listB = [22, 7, 13] print(listB) . [22, 7, 13] . 5. Make 2 lists: . a list of string data | a list of number data | the length of the each list is a minimum of 4 | change the names of the lists | . listA = [] listB = [] . 6. Combine the list to contain all of the data from both lists. . Hint! Use Append listA = [] listB = [] . Homework/Hacks . Consider the following code segment: . scores1 &lt;- [89, 78, 92, 63, 95, 88] | scores2 &lt;- [92, 79, 97, 63] | scores1 &lt;- scores2 | . What are the contents of scores1 after the code segment is executed?: . [89, 78, 92, 63, 95, 88] | [89, 78, 92, 63, 95, 88, 92, 79, 97, 63] | [92, 79, 97, 63, 89, 78, 92, 63, 95, 88] | [92, 79, 97, 63] | Click for the answer! 4. Because the data is not being appended from *scores2* into *scores1*. Consider the following code segment: . listA &lt;- &quot;Sam&quot;, &quot;Ann&quot; | listB &lt;- &quot;Jamal&quot;, &quot;Tamara&quot; | listB &lt;- listA | listA &lt;- listB | . What are the contents of listA after the code segment is executed? . [&quot;Sam&quot;, &quot;Ann&quot;] | [&quot;Jamal&quot;, &quot;Tamara&quot;] | [&quot;Sam&quot;, &quot;Ann&quot;, &quot;Jamal&quot;, &quot;Tamara&quot;] | [&quot;Jamal&quot;, &quot;Tamara&quot;, &quot;Sam&quot;, &quot;Ann&quot;] | Click for the answer! 1. Because all of the data from listA &quot;Sam&quot; and &quot;Ann&quot; replace what is in listB. So if listB replaces what is in listA, &quot;Sam&quot; and &quot;Ann&quot; will still be the only data in that list. What is the length of this list? [&quot;Red&quot;, &quot;Orange&quot;, &quot;Yellow&quot;, &quot;Green&quot;, &quot;Blue&quot;, &quot;Purple&quot; ] . Which of the following types of data can be stored in a list? . Boolean | String | Float | All of the above Click for the answer!&lt;/li&gt; Any type of data can be stored within a list. A list can contain a mix of types of data. &lt;/details&gt; | &lt;/ol&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; |",
            "url": "https://jesa06.github.io/WiSTEM/jupyter/2022/11/16/3.2dailyvideo2.html",
            "relUrl": "/jupyter/2022/11/16/3.2dailyvideo2.html",
            "date": " • Nov 16, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "3.2dailyvideo2",
            "content": "{ “cells”: [ { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# 3.2 Data Abstraction Video 2 n”, “&gt; Using lists as an abstraction to manage the complexity of a program. n”, “ n”, “- toc: true n”, “- badges: true n”, “- comments: true n”, “- categories: [jupyter] n” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# Lists n”, “Lists allow for data abstraction n”, “Variables like strings, numbers, characters, and more can be bundled together n”, “- It could be empty from the start and you can add more variables as needed n”, “If you set one list equal to another list, or transfer data from one list to another, the data will be completely replaced. n”, “You can also append data from one list to another, keeping the old data and adding the new data. n”, “ n”, “# Big Ideas n”, “1. Lists can store any types of elements. n”, “2. In all lists operations, if a list index is less than 1 or greater than the length of the list, an error message is made and the program will terminate. n”, “3. Data abstraction provides a separation between the abstract properties of a data type and the concrete details of its representation. n” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# 1. Your turn to interact, try it now! n”, “Change the amount of coding languages to change the length to 5.” ] }, { “cell_type”: “code”, “execution_count”: null, “metadata”: {}, “outputs”: [], “source”: [ “languages_list = [] n”, “languages_list = [&quot;Python&quot;, &quot;C++&quot;, &quot;JavaScript&quot;]” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# 2. Change the following code to print out the list. n” ] }, { “cell_type”: “code”, “execution_count”: 5, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “Python n” ] } ], “source”: [ “languages_list = [] n”, “languages_list = [&quot;Python&quot;, &quot;C++&quot;, &quot;JavaScript&quot;] n”, “print()” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# 3. Change the following code to print out only &quot;Python&quot; n” ] }, { “cell_type”: “code”, “execution_count”: 6, “metadata”: {}, “outputs”: [ { “ename”: “SyntaxError”, “evalue”: “invalid syntax (3643211896.py, line 3)”, “output_type”: “error”, “traceback”: [ “ u001b[0;36m Input u001b[0;32mIn [6] u001b[0;36m u001b[0m n u001b[0;31m print(languages_list[]) u001b[0m n u001b[0m ^ u001b[0m n u001b[0;31mSyntaxError u001b[0m u001b[0;31m: u001b[0m invalid syntax n” ] } ], “source”: [ “languages_list = [] n”, “languages_list = [&quot;Python&quot;, &quot;C++&quot;, &quot;JavaScript&quot;] n”, “print(languages_list[])” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# 4. Replace contents/data of listA with contents/data from listB.” ] }, { “cell_type”: “code”, “execution_count”: 9, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “[22, 7, 13] n” ] } ], “source”: [ “listA = [] n”, “listA = [1, 55, 8, 2, 76] n”, “listB = [] n”, “listB = [22, 7, 13] n”, “ n”, “print(listB)” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# 5. Make 2 lists: n”, “- a list of string data n”, “- a list of number data n”, “- the length of the each list is a minimum of 4 n”, “- change the names of the lists” ] }, { “cell_type”: “code”, “execution_count”: null, “metadata”: {}, “outputs”: [], “source”: [ “listA = [] n”, “listB = []” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# 6. Combine the list to contain all of the data from both lists. n”, “ n”, “&lt;summary&gt;Hint!&lt;/summary&gt; n”, “Use Append n”, “” ] }, { “cell_type”: “code”, “execution_count”: null, “metadata”: {}, “outputs”: [], “source”: [ “listA = [] n”, “listB = []” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# Homework/Hacks n”, “Consider the following code segment: n”, “- scores1 &lt;- [89, 78, 92, 63, 95, 88] n”, “- scores2 &lt;- [92, 79, 97, 63] n”, “- scores1 &lt;- scores2 n”, “ n”, “What are the contents of scores1 after the code segment is executed?: n”, “ n”, “1. [89, 78, 92, 63, 95, 88] n”, “2. [89, 78, 92, 63, 95, 88, 92, 79, 97, 63] n”, “3. [92, 79, 97, 63, 89, 78, 92, 63, 95, 88] n”, “4. [92, 79, 97, 63] n”, “ n”, “ n”, “&lt;summary&gt;Click for the answer!&lt;/summary&gt; n”, “ 4. Because the data is not being appended from scores2 into scores1. n”, “ n”, “ n”, “ n”, “Consider the following code segment: n”, “- listA &lt;- &quot;Sam&quot;, &quot;Ann&quot; n”, “- listB &lt;- &quot;Jamal&quot;, &quot;Tamara&quot; n”, “- listB &lt;- listA n”, “- listA &lt;- listB n”, “ n”, “What are the contents of listA after the code segment is executed? n”, “ n”, “1. [&quot;Sam&quot;, &quot;Ann&quot;] n”, “2. [&quot;Jamal&quot;, &quot;Tamara&quot;] n”, “3. [&quot;Sam&quot;, &quot;Ann&quot;, &quot;Jamal&quot;, &quot;Tamara&quot;] n”, “4. [&quot;Jamal&quot;, &quot;Tamara&quot;, &quot;Sam&quot;, &quot;Ann&quot;] n”, “ n”, “ n”, “&lt;summary&gt;Click for the answer!&lt;/summary&gt; n”, “1. Because all of the data from listA &quot;Sam&quot; and &quot;Ann&quot; replace what is in listB. So if listB replaces what is in listA, &quot;Sam&quot; and &quot;Ann&quot; will still be the only data in that list. n”, “ n”, “ n”, “What is the length of this list? n”, “[&quot;Red&quot;, &quot;Orange&quot;, &quot;Yellow&quot;, &quot;Green&quot;, &quot;Blue&quot;, &quot;Purple&quot;] n”, “1. 5 n”, “2. 7 n”, “3. 6 n”, “4. 4 n”, “ n”, “&lt;summary&gt;Click for the answer!&lt;/summary&gt; n”, “3. The length of the list is 6. n”, “ n”, “ n”, “What is the index number of &quot;Purple&quot; in this list? n”, “[&quot;Red&quot;, &quot;Orange&quot;, &quot;Yellow&quot;, &quot;Green&quot;, &quot;Blue&quot;, &quot;Purple&quot;] n”, “1. 7 n”, “2. 0 n”, “3. 6 n”, “4. 5 n”, “ n”, “&lt;summary&gt;Click for the answer!&lt;/summary&gt; n”, “4. The index count starts at 0, making &quot;Red&quot; 0 and &quot;Purple&quot; index 5. n”, “ n”, “ n”, “Which of the following types of data can be stored in a list? n”, “1. Boolean n”, “2. String n”, “3. Float n”, “4. All of the above n”, “ n”, “&lt;summary&gt;Click for the answer!&lt;/summary&gt; n”, “4. Any type of data can be stored within a list. A list can contain a mix of types of data. n”, “” ] } ], “metadata”: { “kernelspec”: { “display_name”: “Python 3.8.9 64-bit”, “language”: “python”, “name”: “python3” }, “language_info”: { “codemirror_mode”: { “name”: “ipython”, “version”: 3 }, “file_extension”: “.py”, “mimetype”: “text/x-python”, “name”: “python”, “nbconvert_exporter”: “python”, “pygments_lexer”: “ipython3”, “version”: “3.8.9” }, “orig_nbformat”: 4, “vscode”: { “interpreter”: { “hash”: “31f2aee4e71d21fbe5cf8b01ff0e069b9275f58929596ceb00d14d90e3e16cd6” } } }, “nbformat”: 4, “nbformat_minor”: 2 } .",
            "url": "https://jesa06.github.io/WiSTEM/2022/11/16/3.2dailyvideo2.ipynb",
            "relUrl": "/2022/11/16/3.2dailyvideo2.ipynb",
            "date": " • Nov 16, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "3.2 Daily Video 1",
            "content": "Notes . Strings: sequence of characters, consisits of letters, numbers, and special characters | Lists: ordered sequence of elements, elements are variables | Elements: individual value in a list that is assigned a unique index | Index: referencing elements in a list or string using natural numbers | Elements are referenced by an index | Lists and strings can be represented by using a variable | .",
            "url": "https://jesa06.github.io/WiSTEM/markdown/2022/11/16/3.2dailyvideo1.html",
            "relUrl": "/markdown/2022/11/16/3.2dailyvideo1.html",
            "date": " • Nov 16, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "3.1 Daily Video 2",
            "content": "What will you learn? . You will learn how to determine the value of a variable as a result of an assignment. . Essential Knowledge . The assignment operater allows a program to change the value represented a variable. | The exam reference sheet uses the &quot;⟵&quot; to use for assignment. For example, Text: a ⟵ expression Then the code would display a block text of &quot;a ⟵ expression&quot;. The code will evaluate expression and then assigns a copy of the result to the variable a. | The value stored in a variable will be the most recent value assigned. For example, a ⟵ 1 b ⟵ a a ⟵ 2 display(b) . The code will display 1. . | . Storing Values . When storing values, you assign them to a variable. . Examples: . highScore ⟵ 100 . The highScore is my assignment operator and it is storing the value of 100 inside itself as a variable. This will set my highScore to 100. . firstName ⟵ &quot;Ashley&quot; . The firstName is the variable and the text we are storing inside is &quot;Ashley.&quot; We know that the name is in text because of the quotation marks around the assignment. . isRaining ⟵ true . The isRaining variable has the intention to be a Boolean variable which checks true or false, but it&#39;s been assigned to store the value true. . Practice Questions . What will the highScore be? . currentScore ⟵ 10 highScore ⟵ currentscore currentScore ⟵ 7 . DISPLAY (currentScore) . Answer: 10. . | What is displayed after running this code segment? . num1 ⟵ 4 num2 ⟵ 6 num1 ⟵ num 2 . DISPLAY(num1) DISPLAY(num2) . Answer: 6, 6. . | What is displayed after running this code segment? . num1 ⟵ 25 num2 ⟵ 15 num3 ⟵ 30 num2 ⟵ num3 num3 ⟵ num1 num1 ⟵ num2 . DISPLAY(num1) DISPLAY(num2) DISPLAY(num3) . Answer: 30, 30, and 25. . |",
            "url": "https://jesa06.github.io/WiSTEM/fastpages/jupyter/2022/11/16/3.1dailyvideo2.html",
            "relUrl": "/fastpages/jupyter/2022/11/16/3.1dailyvideo2.html",
            "date": " • Nov 16, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "3.1 Daily Video 1",
            "content": "Variables and Assignments . Essential Knowledge: . A variable is an abstraction inside a program that can hold a value. Each variable has associated data storage that represents one value at a time, but that value can be a list or other collection that in turn contains multiple values. | Using meaningful variable names helps with readability of program code and understanding of what values are represented by the variables. | Some programming languages provide types to represent data, which are referenced using variables. These types include numbers, Booleans, lists, and strings. | Some values are better suited to representation using one type of datum rather than another. | . What is a variable . An abstraction inside a program that can hold a value | . An example naming variables . You want to store the highest score you scored in a game. So, you want to call this variable highScore | You want to store a name, so you can call the variable firstName | It is also possible to store true or false in a variable. For example, the variable could be called isSunny, where true and false are stored in the variable. | phoneNumber could be a variable that stores phone numbers. | These examples are short and convenient as opposed to a long description | However, they give insight to the basic goal of the variable. | Spaces also cause a problem because it is not allowed | Dashes and numbers are also less ideal. | . Data Type examples . highScore –&gt; an integer probably doing addition or subtraction, save it as an integer or numbers. | . | firstName –&gt; text(or string) since a name is text, it should be saved as a string | . | isSunny –&gt; boolean only gives two options: true or false within variable | . | phoneNumber –&gt; text(string) no math involved just a string of numbers | . | . Practice . Question: What would be the best variable name and data type to store a user’s age in a program? . Answer: name: age data type: integer Q: What would be the best variable name and data type to store the number of students in your class? | A: name: numStudents data type: integer to add and subtract Q: What would be the best variable name and data type to store the title of a movie? | A: name: movieTitle data type: text(or string) Q: What would be the best variable name and data type to store if someone’s pet is a dog. A: name: isDog data type: boolean | . Possible Hacks . Go through the following examples and with your table discuss the best variable name and the data type for each situation and stored variable: . You want to store the best price for apples. | You are storing true or false in a variable that asks if the classroom is cold. | How do you store the ID numbers for the students in the classroom? | .",
            "url": "https://jesa06.github.io/WiSTEM/markdown/2022/11/16/3.1dailyvideo1.html",
            "relUrl": "/markdown/2022/11/16/3.1dailyvideo1.html",
            "date": " • Nov 16, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Introducing fastpages",
            "content": ". We are very pleased to announce the immediate availability of fastpages. fastpages is a platform which allows you to create and host a blog for free, with no ads and many useful features, such as: . Create posts containing code, outputs of code (which can be interactive), formatted text, etc directly from Jupyter Notebooks; for instance see this great example post from Scott Hawley. Notebook posts support features such as: Interactive visualizations made with Altair remain interactive. | Hide or show cell input and output. | Collapsable code cells that are either open or closed by default. | Define the Title, Summary and other metadata via a special markdown cells | Ability to add links to Colab and GitHub automatically. | . | Create posts, including formatting and images, directly from Microsoft Word documents. | Create and edit Markdown posts entirely online using GitHub&#39;s built-in markdown editor. | Embed Twitter cards and YouTube videos. | Categorization of blog posts by user-supplied tags for discoverability. | ... and much more | . fastpages relies on Github pages for hosting, and Github Actions to automate the creation of your blog. The setup takes around three minutes, and does not require any technical knowledge or expertise. Due to built-in automation of fastpages, you don&#39;t have to fuss with conversion scripts. All you have to do is save your Jupyter notebook, Word document or markdown file into a specified directory and the rest happens automatically. Infact, this blog post is written in a Jupyter notebook, which you can see with the &quot;View on GitHub&quot; link above. . fast.ai have previously released a similar project called fast_template, which is even easier to set up, but does not support automatic creation of posts from Microsoft Word or Jupyter notebooks, including many of the features outlined above. . Because fastpages is more flexible and extensible, we recommend using it where possible. fast_template may be a better option for getting folks blogging who have no technical expertise at all, and will only be creating posts using Github&#39;s integrated online editor. . Setting Up Fastpages . The setup process of fastpages is automated with GitHub Actions, too! Upon creating a repo from the fastpages template, a pull request will automatically be opened (after ~ 30 seconds) configuring your blog so it can start working. The automated pull request will greet you with instructions like this: . . All you have to do is follow these instructions (in the PR you receive) and your new blogging site will be up and running! . Jupyter Notebooks &amp; Fastpages . In this post, we will cover special features that fastpages provides for Jupyter notebooks. You can also write your blog posts with Word documents or markdown in fastpages, which contain many, but not all the same features. . Options via FrontMatter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . All of the above settings are enabled in this post, so you can see what they look like! . the summary field (preceeded by &gt;) will be displayed under your title, and will also be used by social media to display as the description of your page. | toc: setting this to true will automatically generate a table of contents | badges: setting this to true will display Google Colab and GitHub links on your blog post. | comments: setting this to true will enable comments. See these instructions for more details. | author this will display the authors names. | categories will allow your post to be categorized on a &quot;Tags&quot; page, where readers can browse your post by categories. | . Markdown front matter is formatted similarly to notebooks. The differences between the two can be viewed on the fastpages README. . Code Folding . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . If you want to completely hide cells (not just collapse them), read these instructions. . Interactive Charts With Altair . Interactive visualizations made with Altair remain interactive! . We leave this below cell unhidden so you can enjoy a preview of syntax highlighting in fastpages, which uses the Dracula theme. . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;IMDB_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget IMDB_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | 6.1 | . 1 First Love, Last Rites | 10876.0 | 300000.0 | 6.9 | . 2 I Married a Strange Person | 203134.0 | 250000.0 | 6.8 | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | NaN | . 4 Slam | 1087521.0 | 1000000.0 | 3.4 | . Other Features . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Images w/Captions . You can include markdown images with captions like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Of course, the caption is optional. . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . More Examples . This tutorial contains more examples of what you can do with notebooks. . How fastpages Converts Notebooks to Blog Posts . fastpages uses nbdev to power the conversion process of Jupyter Notebooks to blog posts. When you save a notebook into the /_notebooks folder of your repository, GitHub Actions applies nbdev against those notebooks automatically. The same process occurs when you save Word documents or markdown files into the _word or _posts directory, respectively. . We will discuss how GitHub Actions work in a follow up blog post. . Resources &amp; Next Steps . We highly encourage you to start blogging with fastpages! Some resources that may be helpful: . fastpages repo - this is where you can go to create your own fastpages blog! | Fastai forums - nbdev &amp; blogging category. You can ask questions about fastpages here, as well as suggest new features. | nbdev: this project powers the conversion of Jupyter notebooks to blog posts. | . If you end up writing a blog post using fastpages, please let us know on Twitter: @jeremyphoward, @HamelHusain. .",
            "url": "https://jesa06.github.io/WiSTEM/fastpages/jupyter/2020/02/21/introducing-fastpages.html",
            "relUrl": "/fastpages/jupyter/2020/02/21/introducing-fastpages.html",
            "date": " • Feb 21, 2020"
        }
        
    
  
    
        ,"post8": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://jesa06.github.io/WiSTEM/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post9": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jesa06.github.io/WiSTEM/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post10": {
            "title": "Microsoft Word Example Post",
            "content": "When writing a blog post with Microsoft Word – the filename becomes the title. In this case the file name is “2020-01-01-Microsoft-Word-Example-Post.docx”. . There is minimal support for Word documents in fastpages compared to Jupyter notebooks. Some known limitations: . alt text in Word documents are not yet supported by fastpages, and will break links to images. . | You can only specify front matter for Word documents globally. See the README for more details. . | . For greater control over the content produced from Word documents, you will need to convert Word to markdown files manually. You can follow the steps in this blog post, which walk you through how to use pandoc to do the conversion. Note: If you wish to customize your Word generated blog post in markdown, make sure you delete your Word document from the _word directory so your markdown file doesn’t get overwritten! . If your primary method of writing blog posts is Word documents, and you plan on always manually editing Word generated markdown files, you are probably better off using fast_template instead of fastpages. . The material below is a reproduction of this blog post, and serves as an illustrative example. . Maintaining a healthy open source project can entail a huge amount of toil. Popular projects often have orders of magnitude more users and episodic contributors opening issues and PRs than core maintainers capable of handling these issues. . Consider this graphic prepared by the NumFOCUS foundation showing the number of maintainers for three widely used scientific computing projects: . . We can see that across these three projects, there is a very low ratio maintainers to users. Fixing this problem is not an easy task and likely requires innovative solutions to address the economics as well as tools. . Due to its recent momentum and popularity, Kubeflow suffers from a similar fate as illustrated by the growth of new issues opened: . . Source: “TensorFlow World 2019, Automating Your Developer Workflow With ML” . Coincidentally, while building out end to end machine learning examples for Kubeflow, we built two examples using publicly available GitHub data: GitHub Issue Summarization and Code Search. While these tutorials were useful for demonstrating components of Kubeflow, we realized that we could take this a step further and build concrete data products that reduce toil for maintainers. . This is why we started the project kubeflow/code-intelligence, with the goals of increasing project velocity and health using data driven tools. Below are two projects we are currently experimenting with : . Issue Label Bot: This is a bot that automatically labels GitHub issues using Machine Learning. This bot is a GitHub App that was originally built for Kubeflow but is now also used by several large open source projects. The current version of this bot only applies a very limited set of labels, however we are currently A/B testing new models that allow personalized labels. Here is a blog post discussing this project in more detail. . | Issue Triage GitHub Action: to compliment the Issue Label Bot, we created a GitHub Action that automatically adds / removes Issues to the Kubeflow project board tracking issues needing triage. . | Together these projects allow us to reduce the toil of triaging issues. The GitHub Action makes it much easier for the Kubeflow maintainers to track issues needing triage. With the label bot we have taken the first steps in using ML to replace human intervention. We plan on using features extracted by ML to automate more steps in the triage process to further reduce toil. . Building Solutions with GitHub Actions . One of the premises of Kubeflow is that a barrier to building data driven, ML powered solutions is getting models into production and integrated into a solution. In the case of building models to improve OSS project health, that often means integrating with GitHub where the project is hosted. . We are really excited by GitHub’s newly released feature GitHub Actions because we think it will make integrating ML with GitHub much easier. . For simple scripts, like the issue triage script, GitHub actions make it easy to automate executing the script in response to GitHub events without having to build and host a GitHub app. . To automate adding/removing issues needing triage to a Kanban board we wrote a simple python script that interfaces with GitHub’s GraphQL API to modify issues. . As we continue to iterate on ML Models to further reduce toil, GitHub Actions will make it easy to leverage Kubeflow to put our models into production faster. A number of prebuilt GitHub Actions make it easy to create Kubernetes resources in response to GitHub events. For example, we have created GitHub Actions to launch Argo Workflows. This means once we have a Kubernetes job or workflow to perform inference we can easily integrate the model with GitHub and have the full power of Kubeflow and Kubernetes (eg. GPUs). We expect this will allow us to iterate much faster compared to building and maintaining GitHub Apps. . Call To Action . We have a lot more work to do in order to achieve our goal of reducing the amount of toil involved in maintaining OSS projects. If your interested in helping out here’s a couple of issues to get started: . Help us create reports that pull and visualize key performance indicators (KPI). https://github.com/kubeflow/code-intelligence/issues/71 . We have defined our KPI here: issue #19 | . | Combine repo specific and non-repo specific label predictions: https://github.com/kubeflow/code-intelligence/issues/70 . | . In addition to the aforementioned issues we welcome contributions for these other issues in our repo. .",
            "url": "https://jesa06.github.io/WiSTEM/2020/01/01/Microsoft-Word-Example-Post.html",
            "relUrl": "/2020/01/01/Microsoft-Word-Example-Post.html",
            "date": " • Jan 1, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://jesa06.github.io/WiSTEM/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jesa06.github.io/WiSTEM/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}